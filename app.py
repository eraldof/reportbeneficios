import streamlit as st
import pandas as pd
import unicodedata
import re
from datetime import datetime
import io
import os
import numpy as np
import time
from streamlit.errors import NoSessionContext

from main import ( process_report
)

st.set_page_config(
    page_title="Processador de Relat√≥rios de Benef√≠cios",
    page_icon="üìä",
    layout="centered"
)

def main():
    # Initialize session state for tracking processing completion
    if 'processing_completed_time' not in st.session_state:
        st.session_state.processing_completed_time = None
    
    if 'processing_started' not in st.session_state:
        st.session_state.processing_started = False
        
    if 'result_df' not in st.session_state:
        st.session_state.result_df = None

    # Clear progress indicators if timer expired
    if st.session_state.processing_completed_time is not None:
        elapsed_time = time.time() - st.session_state.processing_completed_time
        if elapsed_time >= 5:
            st.session_state.processing_completed_time = None
            st.session_state.processing_started = False
            # N√£o use st.rerun() aqui, vamos controlar a limpeza de forma expl√≠cita
    
    st.title("Processador de Relat√≥rios de Benef√≠cios")
    st.markdown("""
    Esta aplica√ß√£o processa relat√≥rios de benef√≠cios, consolidando dados de diferentes fontes.
    Carregue os arquivos necess√°rios e configure as op√ß√µes para gerar o relat√≥rio final.
    """)
    
    with st.sidebar:

        upload_container = st.container()
        
        with upload_container:
            st.header("Upload de Arquivos")
            st.subheader("Carregar arquivo de benef√≠cios")
            beneficios_file = st.file_uploader(
                type=["xlsx"],
                help="Arquivo Excel contendo planilhas com dados de benef√≠cios",
                label_visibility="collapsed",
                label="Carregar arquivo de beneficios"
                )

            st.subheader("Carregar arquivo com o or√ßamento")
            recorrentes_file = st.file_uploader(
                label= "Carregar arquivo com o or√ßamento",
                label_visibility="collapsed",
                type=["xlsx"],
                help="Arquivo Excel contendo dados de recorrentes"
            )
        
            st.subheader("Op√ß√µes de Processamento")

            month_mapping = {
                'Janeiro': '01', 
                'Fevereiro': '02', 
                'Mar√ßo': '03', 
                'Abril': '04', 
                'Maio': '05', 
                'Junho': '06',
                'Julho': '07', 
                'Agosto': '08', 
                'Setembro': '09', 
                'Outubro': '10', 
                'Novembro': '11', 
                'Dezembro': '12'
            }
            
            mes_atual = int(datetime.now().strftime('%m'))
            mes_default = (mes_atual - 1) % 12
            if mes_default == 0:
                mes_default = 12
            
            month_names = list(month_mapping.keys())
            default_month = month_names[mes_default-1]
            
            selected_month = st.selectbox(
                "Selecione o m√™s de an√°lise:",
                options=month_names,
                index=month_names.index(default_month)
            )
     
            ednaldo_mode = st.checkbox("Usar modo Ednaldo", value=False, 
                                    help="Ativa o processamento com regras espec√≠ficas do modo Ednaldo")
        
        process_button = st.button("Processar Dados", type="primary", use_container_width=True)
    
    # Processar quando o bot√£o for clicado e ambos os arquivos estiverem carregados
    result_df = None
    
    # Create placeholder containers for progress indicators
    progress_container = st.empty()
    status_container = st.empty()
    success_container = st.empty()
    
    # Check if we need to display results from a previous run
    result_df = st.session_state.result_df
    
    if process_button:
        if beneficios_file is None or recorrentes_file is None:
            st.error("Por favor, carregue os dois arquivos necess√°rios.")
        else:
            try:
                # Limpar quaisquer resultados anteriores
                st.session_state.result_df = None
                
                # Set the processing started flag
                st.session_state.processing_started = True
                
                with st.spinner("Processando dados..."):
                    # Create progress elements within their containers
                    progress_bar = progress_container.progress(0)
                    status_text = status_container.empty()
                    
                    def update_progress(progress, message=""):
                        try:
                            progress_bar.progress(progress/100)
                            if message:
                                status_text.text(message)
                        except NoSessionContext:
                            # Ignore attempts to update progress outside of session context
                            pass
                    
                    result_df = process_report(
                        beneficios_file,
                        recorrentes_file,
                        ednaldo=ednaldo_mode,
                        mes_analise=month_mapping[selected_month],
                        progress_callback=update_progress
                    )
                
                st.session_state.result_df = result_df
                
                st.session_state.processing_completed_time = time.time()
                
                success_container.success(f"Processamento conclu√≠do! {len(result_df)} registros processados.")
                
                st.rerun()
                
            except Exception as e:
                # Clear progress indicators on error
                progress_container.empty()
                status_container.empty()
                success_container.empty()
                st.session_state.processing_started = False
                st.session_state.processing_completed_time = None
                st.error(f"Erro durante o processamento: {str(e)}")
                st.exception(e) 
    
    # Limpar os cont√™ineres ap√≥s expira√ß√£o do timer ou se n√£o estiver processando
    if (st.session_state.processing_completed_time is not None and 
        time.time() - st.session_state.processing_completed_time >= 5):
        progress_container.empty()
        status_container.empty()
        success_container.empty()
    
    # Se temos um resultado para mostrar (de uma execu√ß√£o atual ou anterior)
    if result_df is not None:
        # Continue displaying the tabs regardless of the progress message timeout
        st.header("Resultados")
        
        # Visualiza√ß√£o dos dados em abas
        tab1, tab2 = st.tabs(["Vis√£o Geral", "An√°lise Detalhada"])
        
        with tab1:
            st.subheader("Resumo dos Benef√≠cios")
            
            # Calcular totais gerais
            col1, col2 = st.columns(2)
            
            # Formatar os n√∫meros para moeda brasileira
            def format_currency(value):
                return f"R$ {value:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
            
            # Converter colunas para valores num√©ricos
            numeric_columns = ['previsto_va', 'realizado_va', 'previsto_unimed', 'realizado_unimed', 
                               'previsto_clin', 'realizado_clin', 'previsto_sv', 'realizado_sv']
            
            for col in numeric_columns:
                result_df[col] = pd.to_numeric(result_df[col], errors='coerce').fillna(0)
            
            # Calcular totais
            totais = {
                'Vale Alimenta√ß√£o': {
                    'Previsto': result_df['previsto_va'].sum(),
                    'Realizado': result_df['realizado_va'].sum(),
                    'Diferen√ßa': result_df['realizado_va'].sum() - result_df['previsto_va'].sum()
                },
                'Assist√™ncia M√©dica': {
                    'Previsto': result_df['previsto_unimed'].sum(),
                    'Realizado': result_df['realizado_unimed'].sum(),
                    'Diferen√ßa': result_df['realizado_unimed'].sum() - result_df['previsto_unimed'].sum()
                },
                'Assist√™ncia Odontol√≥gica': {
                    'Previsto': result_df['previsto_clin'].sum(),
                    'Realizado': result_df['realizado_clin'].sum(),
                    'Diferen√ßa': result_df['realizado_clin'].sum() - result_df['previsto_clin'].sum()
                },
                'Seguro de Vida': {
                    'Previsto': result_df['previsto_sv'].sum(),
                    'Realizado': result_df['realizado_sv'].sum(),
                    'Diferen√ßa': result_df['realizado_sv'].sum() - result_df['previsto_sv'].sum()
                },
                'Total Geral': {
                    'Previsto': result_df[['previsto_va', 'previsto_unimed', 'previsto_clin', 'previsto_sv']].sum().sum(),
                    'Realizado': result_df[['realizado_va', 'realizado_unimed', 'realizado_clin', 'realizado_sv']].sum().sum(),
                    'Diferen√ßa': result_df[['realizado_va', 'realizado_unimed', 'realizado_clin', 'realizado_sv']].sum().sum() - 
                                 result_df[['previsto_va', 'previsto_unimed', 'previsto_clin', 'previsto_sv']].sum().sum()
                }
            }
            
            # Criar DataFrame para exibi√ß√£o de totais
            totais_df = pd.DataFrame(totais).T
            totais_df['% Varia√ß√£o'] = (totais_df['Diferen√ßa'] / totais_df['Previsto'] * 100).fillna(0)
            
            # Formata√ß√£o estilizada
            def highlight_diff(val):
                if isinstance(val, (int, float)):
                    color = 'red' if val > 0 else 'green' if val < 0 else 'black'
                    return f'color: {color}'
                return ''
            
            # Aplicar formata√ß√£o de moeda
            formatted_df = totais_df.copy()
            for col in ['Previsto', 'Realizado', 'Diferen√ßa']:
                formatted_df[col] = formatted_df[col].apply(format_currency)
            formatted_df['% Varia√ß√£o'] = formatted_df['% Varia√ß√£o'].apply(lambda x: f"{x:.2f}%")
            
            # Exibir tabela estilizada
            st.dataframe(
                formatted_df,
                use_container_width=True,
                height=240, hide_index= True
            )
            
            st.subheader("Pr√©via do relat√≥rio")
            st.dataframe(result_df, use_container_width=True, hide_index= True)
        
        with tab2:
            st.subheader("An√°lise por Filial")
            
            # Criar tabs para diferentes vis√µes
            detail_tab1, detail_tab2, detail_tab3 = st.tabs(["Comparativo Or√ßado vs Realizado", "Transfer√™ncias Entre Filiais", "Detalhes por Benef√≠cio"])
            
            with detail_tab1:
                # Criar uma tabela de compara√ß√£o entre previsto e realizado por filial
                st.write("Comparativo de valores or√ßados vs realizados por filial:")
                
                # Substituir valores vazios ou NaN por "N√£o Informado"
                result_df['previsto_filial'] = result_df['previsto_filial'].fillna('N√£o Informado')
                
                # Criar um dataframe para o comparativo
                comparativo_filiais = []
                
                # Para cada filial prevista, calcular o que foi or√ßado
                filiais_previstas = result_df['previsto_filial'].unique()
                
                for filial in filiais_previstas:
                    filial_df = result_df[result_df['previsto_filial'] == filial]
                    
                    # Valores previstos para esta filial
                    previsto_va = filial_df['previsto_va'].sum()
                    previsto_unimed = filial_df['previsto_unimed'].sum()
                    previsto_clin = filial_df['previsto_clin'].sum()
                    previsto_sv = filial_df['previsto_sv'].sum()
                    total_previsto = previsto_va + previsto_unimed + previsto_clin + previsto_sv
                    
                    # Valores realizados para esta filial (independente de onde foi realizado)
                    realizado_va = filial_df['realizado_va'].sum()
                    realizado_unimed = filial_df['realizado_unimed'].sum()
                    realizado_clin = filial_df['realizado_clin'].sum()
                    realizado_sv = filial_df['realizado_sv'].sum()
                    total_realizado = realizado_va + realizado_unimed + realizado_clin + realizado_sv
                    
                    # Calcular diferen√ßa
                    diferenca = total_realizado - total_previsto
                    variacao_pct = (diferenca / total_previsto * 100) if total_previsto != 0 else 0
                    
                    comparativo_filiais.append({
                        'Filial': filial,
                        'Previsto': total_previsto,
                        'Realizado': total_realizado,
                        'Diferen√ßa': diferenca,
                        'Varia√ß√£o (%)': variacao_pct
                    })
                
                # Criar DataFrame de comparativo
                comparativo_df = pd.DataFrame(comparativo_filiais)
                comparativo_df = comparativo_df.sort_values(by='Filial')
                
                # Criar uma c√≥pia formatada para exibi√ß√£o
                comparativo_display = comparativo_df.copy()
                comparativo_display['Previsto'] = comparativo_display['Previsto'].apply(format_currency)
                comparativo_display['Realizado'] = comparativo_display['Realizado'].apply(format_currency)
                comparativo_display['Diferen√ßa'] = comparativo_display['Diferen√ßa'].apply(format_currency)
                comparativo_display['Varia√ß√£o (%)'] = comparativo_display['Varia√ß√£o (%)'].apply(lambda x: f"{x:.2f}%")
                
                st.dataframe(comparativo_display, use_container_width=True, hide_index=True)
                
            with detail_tab2:
                st.write("An√°lise de transfer√™ncias entre filiais (Or√ßado vs Realizado):")
                
                # Sele√ß√£o do tipo de benef√≠cio para a matriz de transfer√™ncia
                beneficio_matriz = st.selectbox(
                    "Selecione o benef√≠cio para an√°lise da matriz de transfer√™ncias:",
                    ["Vale Alimenta√ß√£o", "Assist√™ncia M√©dica", "Assist√™ncia Odontol√≥gica", "Seguro de Vida"],
                    key="matriz_transferencia"
                )
                
                # Mapear o benef√≠cio selecionado para as colunas correspondentes
                beneficio_map = {
                    "Vale Alimenta√ß√£o": ("previsto_va", "frealizado_va", "realizado_va"),
                    "Assist√™ncia M√©dica": ("previsto_unimed", "frealizado_un", "realizado_unimed"),
                    "Assist√™ncia Odontol√≥gica": ("previsto_clin", "frealizado_cl", "realizado_clin"),
                    "Seguro de Vida": ("previsto_sv", "frealizado_sv", "realizado_sv")
                }
                
                previsto_col, frealizado_col, realizado_col = beneficio_map[beneficio_matriz]
                
                # Filtrar dados v√°lidos
                df_valido = result_df.dropna(subset=['previsto_filial', frealizado_col])
                df_valido['previsto_filial'] = df_valido['previsto_filial'].astype(str)
                df_valido[frealizado_col] = df_valido[frealizado_col].astype(str)
                
                # Criar tabela de transfer√™ncias (matriz)
                matriz_pivot = pd.pivot_table(
                    df_valido,
                    values=realizado_col,
                    index='previsto_filial',
                    columns=frealizado_col,
                    aggfunc='sum',
                    fill_value=0
                )
                
                # Adicionar totais
                matriz_pivot['Total Or√ßado'] = matriz_pivot.sum(axis=1)
                matriz_pivot.loc['Total Realizado'] = matriz_pivot.sum(axis=0)
                
                # Formatar valores para moeda
                matriz_formatted = matriz_pivot.applymap(format_currency)
                
                st.write(f"Matriz de transfer√™ncias - {beneficio_matriz}")
                st.write("Linhas: Filial onde foi or√ßado | Colunas: Filial onde foi realizado")
                st.dataframe(matriz_formatted, use_container_width=True)
                
                # Criar gr√°fico de sankey ou barras para visualizar fluxos (opcional)
                st.write("Interpreta√ß√£o: Valores nas c√©lulas mostram quanto foi gasto em cada combina√ß√£o de filial or√ßada ‚Üí filial realizada")
                
                # Nova se√ß√£o para visualizar CPFs transferidos entre filiais
                st.markdown("---")
                st.subheader("Detalhamento de CPFs Transferidos")
                st.write("Visualize os CPFs que foram or√ßados em uma filial e realizados em outra:")
                
                # Sele√ß√£o independente do tipo de benef√≠cio para detalhamento de CPFs
                beneficio_cpf = st.selectbox(
                    "Selecione o benef√≠cio para detalhamento de CPFs transferidos:",
                    ["Vale Alimenta√ß√£o", "Assist√™ncia M√©dica", "Assist√™ncia Odontol√≥gica", "Seguro de Vida"],
                    key="detalhe_cpf"
                )
                
                # Mapear o benef√≠cio selecionado para CPFs para as colunas correspondentes
                previsto_col_cpf, frealizado_col_cpf, realizado_col_cpf = beneficio_map[beneficio_cpf]
                
                # Filtrar dados v√°lidos para o benef√≠cio selecionado para CPFs
                df_valido_cpf = result_df.dropna(subset=['previsto_filial', frealizado_col_cpf])
                df_valido_cpf['previsto_filial'] = df_valido_cpf['previsto_filial'].astype(str)
                df_valido_cpf[frealizado_col_cpf] = df_valido_cpf[frealizado_col_cpf].astype(str)
                
                # Obter listas de filiais √∫nicas para sele√ß√£o
                filiais_orcamento = sorted(df_valido_cpf['previsto_filial'].unique())
                filiais_realizacao = sorted(df_valido_cpf[frealizado_col_cpf].unique())
                
                # Criar seletores para filiais de origem e destino
                col1, col2 = st.columns(2)
                with col1:
                    filial_origem = st.selectbox(
                        "Filial onde foi or√ßado:",
                        options=filiais_orcamento,
                        key=f"origem_{beneficio_cpf}"
                    )
                
                with col2:
                    filial_destino = st.selectbox(
                        "Filial onde foi realizado:",
                        options=filiais_realizacao,
                        key=f"destino_{beneficio_cpf}"
                    )
                
                if filial_origem != filial_destino:
                    # Filtrar os CPFs transferidos entre as filiais selecionadas
                    cpfs_transferidos = df_valido_cpf[
                        (df_valido_cpf['previsto_filial'] == filial_origem) & 
                        (df_valido_cpf[frealizado_col_cpf] == filial_destino)
                    ]
                    
                    if not cpfs_transferidos.empty:
                        # Selecionar e renomear colunas relevantes
                        if 'cpf' in cpfs_transferidos.columns:
                            cpf_col = 'cpf'
                        elif 'CPFTITULAR' in cpfs_transferidos.columns:
                            cpf_col = 'CPFTITULAR'
                        else:
                            cpf_col = None
                            
                        if cpf_col:
                            colunas_display = [cpf_col, previsto_col_cpf, realizado_col_cpf]
                            colunas_rename = {
                                cpf_col: 'CPF',
                                previsto_col_cpf: 'Valor Or√ßado',
                                realizado_col_cpf: 'Valor Realizado'
                            }
                            
                            # Criar DataFrame para exibi√ß√£o
                            display_df = cpfs_transferidos[colunas_display].copy()
                            display_df = display_df.rename(columns=colunas_rename)
                            
                            # Formatar valores monet√°rios
                            display_df['Valor Or√ßado'] = display_df['Valor Or√ßado'].apply(format_currency)
                            display_df['Valor Realizado'] = display_df['Valor Realizado'].apply(format_currency)
                            
                            # Exibir tabela (movi para dentro do bloco if)
                            st.write(f"CPFs or√ßados em **{filial_origem}** e realizados em **{filial_destino}**:")
                            st.dataframe(display_df, use_container_width=True, hide_index=True)
                            
                            # Mostrar totais
                            total_orcado = cpfs_transferidos[previsto_col_cpf].sum()
                            total_realizado = cpfs_transferidos[realizado_col_cpf].sum()
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                st.metric("Total Or√ßado", format_currency(total_orcado))
                            with col2:
                                st.metric("Total Realizado", format_currency(total_realizado))
                        else:
                            st.warning("Dados de CPF n√£o dispon√≠veis no relat√≥rio. Verifique se existe uma coluna 'cpf' ou 'CPFTITULAR'.")
                    else:
                        st.info(f"N√£o foram encontrados CPFs or√ßados em {filial_origem} e realizados em {filial_destino}.")
                else:
                    st.info("Selecione filiais diferentes para visualizar as transfer√™ncias.")
                
            with detail_tab3:
                st.write("Detalhes por tipo de benef√≠cio:")
                
                benefit_tabs = st.tabs(["Vale Alimenta√ß√£o", "Assist√™ncia M√©dica", "Assist√™ncia Odontol√≥gica", "Seguro de Vida"])
                
                # Tab Vale Alimenta√ß√£o
                with benefit_tabs[0]:
                    if 'frealizado_va' in result_df.columns:
                        st.subheader("Detalhamento - Vale Alimenta√ß√£o")
                        
                        # Substituir valores vazios ou NaN
                        result_df['frealizado_va'] = result_df['frealizado_va'].fillna('N√£o Informado')
                        result_df['previsto_filial'] = result_df['previsto_filial'].fillna('N√£o Informado')
                        
                        # 1. Valores por filial onde foi realizado
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("Por filial onde foi Or√ßado:")
                            va_prev_group = result_df.groupby('previsto_filial')['previsto_va'].sum().reset_index()
                            va_prev_group = va_prev_group.rename(columns={
                                'previsto_filial': 'Filial',
                                'previsto_va': 'Valor Or√ßado'
                            })
                            va_prev_group = va_prev_group.sort_values(by='Filial')
                            va_prev_group['Valor Or√ßado'] = va_prev_group['Valor Or√ßado'].apply(format_currency)
                            st.dataframe(va_prev_group, use_container_width=True, hide_index=True)
                        
                        with col2:
                            st.write("Por filial onde foi Realizado:")
                            va_real_group = result_df.groupby('frealizado_va')['realizado_va'].sum().reset_index()
                            va_real_group = va_real_group.rename(columns={
                                'frealizado_va': 'Filial',
                                'realizado_va': 'Valor Realizado'
                            })
                            va_real_group = va_real_group.sort_values(by='Filial')
                            va_real_group['Valor Realizado'] = va_real_group['Valor Realizado'].apply(format_currency)
                            st.dataframe(va_real_group, use_container_width=True, hide_index=True)
                
                # Tab Assist√™ncia M√©dica
                with benefit_tabs[1]:
                    if 'frealizado_un' in result_df.columns:
                        st.subheader("Detalhamento - Assist√™ncia M√©dica")
                        
                        # Substituir valores vazios ou NaN
                        result_df['frealizado_un'] = result_df['frealizado_un'].fillna('N√£o Informado')
                        
                        # 1. Valores por filial onde foi realizado
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("Por filial onde foi Or√ßado:")
                            un_prev_group = result_df.groupby('previsto_filial')['previsto_unimed'].sum().reset_index()
                            un_prev_group = un_prev_group.rename(columns={
                                'previsto_filial': 'Filial',
                                'previsto_unimed': 'Valor Or√ßado'
                            })
                            un_prev_group = un_prev_group.sort_values(by='Filial')
                            un_prev_group['Valor Or√ßado'] = un_prev_group['Valor Or√ßado'].apply(format_currency)
                            st.dataframe(un_prev_group, use_container_width=True, hide_index=True)
                        
                        with col2:
                            st.write("Por filial onde foi Realizado:")
                            un_real_group = result_df.groupby('frealizado_un')['realizado_unimed'].sum().reset_index()
                            un_real_group = un_real_group.rename(columns={
                                'frealizado_un': 'Filial',
                                'realizado_unimed': 'Valor Realizado'
                            })
                            un_real_group = un_real_group.sort_values(by='Filial')
                            un_real_group['Valor Realizado'] = un_real_group['Valor Realizado'].apply(format_currency)
                            st.dataframe(un_real_group, use_container_width=True, hide_index=True)
                
                # Tab Assist√™ncia Odontol√≥gica
                with benefit_tabs[2]:
                    if 'frealizado_cl' in result_df.columns:
                        st.subheader("Detalhamento - Assist√™ncia Odontol√≥gica")
                        
                        # Substituir valores vazios ou NaN
                        result_df['frealizado_cl'] = result_df['frealizado_cl'].fillna('N√£o Informado')
                        
                        # 1. Valores por filial onde foi realizado
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("Por filial onde foi Or√ßado:")
                            cl_prev_group = result_df.groupby('previsto_filial')['previsto_clin'].sum().reset_index()
                            cl_prev_group = cl_prev_group.rename(columns={
                                'previsto_filial': 'Filial',
                                'previsto_clin': 'Valor Or√ßado'
                            })
                            cl_prev_group = cl_prev_group.sort_values(by='Filial')
                            cl_prev_group['Valor Or√ßado'] = cl_prev_group['Valor Or√ßado'].apply(format_currency)
                            st.dataframe(cl_prev_group, use_container_width=True, hide_index=True)
                        
                        with col2:
                            st.write("Por filial onde foi Realizado:")
                            cl_real_group = result_df.groupby('frealizado_cl')['realizado_clin'].sum().reset_index()
                            cl_real_group = cl_real_group.rename(columns={
                                'frealizado_cl': 'Filial',
                                'realizado_clin': 'Valor Realizado'
                            })
                            cl_real_group = cl_real_group.sort_values(by='Filial')
                            cl_real_group['Valor Realizado'] = cl_real_group['Valor Realizado'].apply(format_currency)
                            st.dataframe(cl_real_group, use_container_width=True, hide_index=True)
                
                # Tab Seguro de Vida
                with benefit_tabs[3]:
                    if 'frealizado_sv' in result_df.columns:
                        st.subheader("Detalhamento - Seguro de Vida")
                        
                        # Substituir valores vazios ou NaN
                        result_df['frealizado_sv'] = result_df['frealizado_sv'].fillna('N√£o Informado')
                        
                        # 1. Valores por filial onde foi realizado
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("Por filial onde foi Or√ßado:")
                            sv_prev_group = result_df.groupby('previsto_filial')['previsto_sv'].sum().reset_index()
                            sv_prev_group = sv_prev_group.rename(columns={
                                'previsto_filial': 'Filial',
                                'previsto_sv': 'Valor Or√ßado'
                            })
                            sv_prev_group = sv_prev_group.sort_values(by='Filial')
                            sv_prev_group['Valor Or√ßado'] = sv_prev_group['Valor Or√ßado'].apply(format_currency)
                            st.dataframe(sv_prev_group, use_container_width=True, hide_index=True)
                        
                        with col2:
                            st.write("Por filial onde foi Realizado:")
                            sv_real_group = result_df.groupby('frealizado_sv')['realizado_sv'].sum().reset_index()
                            sv_real_group = sv_real_group.rename(columns={
                                'frealizado_sv': 'Filial',
                                'realizado_sv': 'Valor Realizado'
                            })
                            sv_real_group = sv_real_group.sort_values(by='Filial')
                            sv_real_group['Valor Realizado'] = sv_real_group['Valor Realizado'].apply(format_currency)
                            st.dataframe(sv_real_group, use_container_width=True, hide_index=True)
        
        # Prepara para download
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            result_df.to_excel(writer, index=False)
        
        with st.sidebar.container():
            st.download_button(
                label="üì• Baixar Relat√≥rio Excel",
                data=output.getvalue(),
                file_name=f"relatorio_beneficios_{datetime.now().strftime('%Y%m%d')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
    
    # If not in processing state and not showing completion, clear the containers
    if not st.session_state.processing_started and st.session_state.processing_completed_time is None:
        progress_container.empty()
        status_container.empty()
        success_container.empty()

if __name__ == "__main__":
    main()
